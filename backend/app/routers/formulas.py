# ðŸ“„ backend/app/routers/formulas.py
# v1.1.1 â€” corrigida ordem de endpoints para evitar conflitos de rota

from fastapi import APIRouter, Depends, HTTPException, Query
from pydantic import BaseModel
from sqlmodel import Session, select
from app.models import Formula, FormulaCreate, User
from app.database import engine, get_session

router = APIRouter()

# ðŸ”µ Modelos auxiliares
class FormulaDeleteRequest(BaseModel):
    id: int

class FormulaUpdateRequest(FormulaCreate):
    id: int

# ðŸ”µ Criar fÃ³rmula
@router.post("/formulas/")
def criar_formula(formula: FormulaCreate):
    with Session(engine) as session:
        nova_formula = Formula(**formula.dict())
        session.add(nova_formula)
        session.commit()
        session.refresh(nova_formula)
        return nova_formula

# âœ… NOVOS ENDPOINTS - precisam vir antes da rota por ID

# ðŸ”µ Listar todas as fÃ³rmulas com autor (farmÃ¡cia ou prescritor)
@router.get("/formulas/todas")
def listar_todas_formulas(
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    session: Session = Depends(get_session)
):
    formulas = session.exec(
        select(Formula).offset(offset).limit(limit)
    ).all()
    resultado = []

    for f in formulas:
        if f.farmacia_id:
            farmacia = session.exec(select(User).where(User.id == f.farmacia_id)).first()
            autor = farmacia.name if farmacia else "FarmÃ¡cia desconhecida"
        elif f.usuario_id:
            prescritor = session.exec(select(User).where(User.id == f.usuario_id)).first()
            autor = prescritor.name if prescritor else "Prescritor desconhecido"
        else:
            autor = "Autor desconhecido"

        resultado.append({
            "id": f.id,
            "nome": f.nome,
            "composicao": f.composicao,
            "indicacao": f.indicacao,
            "posologia": f.posologia,
            "autor": autor,
            "farmacia_id": f.farmacia_id,
            "usuario_id": f.usuario_id
        })

    return resultado

# ðŸ”µ Listar fÃ³rmulas criadas por um prescritor (com paginaÃ§Ã£o)
@router.get("/formulas/prescritor/{prescritor_id}")
def listar_formulas_por_prescritor(
    prescritor_id: int,
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    session: Session = Depends(get_session)
):
    formulas = session.exec(
        select(Formula)
        .where(Formula.usuario_id == prescritor_id)
        .offset(offset)
        .limit(limit)
    ).all()
    return formulas

# ðŸ”µ Listar fÃ³rmulas de uma farmÃ¡cia â€” DEIXAR POR ÃšLTIMO para evitar conflito de rota
@router.get("/formulas/{farmacia_id}")
def listar_formulas_por_farmacia(farmacia_id: int):
    with Session(engine) as session:
        formulas = session.exec(
            select(Formula).where(Formula.farmacia_id == farmacia_id)
        ).all()
        return formulas

# ðŸ”µ Excluir fÃ³rmula via POST
@router.post("/formulas/delete")
def deletar_formula(payload: FormulaDeleteRequest, session: Session = Depends(get_session)):
    formula = session.get(Formula, payload.id)
    if not formula:
        raise HTTPException(status_code=404, detail="FÃ³rmula nÃ£o encontrada")
    session.delete(formula)
    session.commit()
    return {"ok": True}

# ðŸ”µ Atualizar fÃ³rmula via POST
@router.post("/formulas/update")
def atualizar_formula(data: FormulaUpdateRequest, session: Session = Depends(get_session)):
    formula = session.get(Formula, data.id)
    if not formula:
        raise HTTPException(status_code=404, detail="FÃ³rmula nÃ£o encontrada")
    
    formula.nome = data.nome
    formula.composicao = data.composicao
    formula.indicacao = data.indicacao
    formula.posologia = data.posologia

    session.commit()
    session.refresh(formula)
    return formula
